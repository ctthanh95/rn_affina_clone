import React from 'react';
import {Platform, View, StatusBar} from 'react-native';
import {isNumber} from 'lodash';
import {useSafeAreaInsets} from 'react-native-safe-area-context';
import {
  handleMargin,
  handlePadding,
  handleCircle,
  handleSquare,
} from '@utils/shapes';
import {s, vs, ms} from '@utils/responsive';
import styles from './styles';
import PropTypes from './type';

const AppView = ({
  flex,
  flexShrink,
  flexGrow,
  row,
  column,
  shadow,
  backgroundColor,
  space,
  padding,
  margin,
  alignStart,
  alignCenter,
  alignEnd,
  wrap,
  justifyCenter,
  justifyEnd,
  justifyStart,
  justifySpaceAround,
  justifySpaceBetween,
  paddingTop,
  paddingBottom,
  paddingLeft,
  paddingRight,
  marginBottom,
  marginLeft,
  marginRight,
  marginTop,
  paddingVertical,
  paddingHorizontal,
  marginVertical,
  marginHorizontal,
  radius,
  height,
  width,
  square,
  circle,
  borderWidth,
  relative,
  absolute,
  top,
  left,
  right,
  bottom,
  borderColor,
  children,
  overflow,
  alignSelf,
  style,
  shadowColor,
  opacity,
  elevation,
  maxWidth,
  maxHeight,
  borderTopWidth,
  borderRightWidth,
  borderBottomWidth,
  borderLeftWidth,
  isPaddingIos,
  zIndex,
  borderTopLeftRadius,
  borderTopRightRadius,
  isPaddingAndroid,
  absoluteFull,
  radiusTop,
  radiusBottom,
  center,
  ...rest
}: PropTypes) => {
  const insets = useSafeAreaInsets();

  const blockStyles = [
    // isPaddingIos && {
    //   paddingBottom: Platform.OS === 'ios' ? insets.bottom : ms(20),
    // },
    // isPaddingAndroid && {
    //   paddingTop: Platform.OS === 'android' ? StatusBar.currentHeight : 0,
    // },
    flex && styles.block,
    flexShrink && styles.flexShrink,
    flexGrow && styles.flexGrow,
    !flex && {flex: 0},
    maxWidth && {maxWidth},
    maxHeight && {maxHeight},
    width && {width: width},
    height && {height: height},
    row && styles.row,
    column && styles.column,
    shadow && {
      ...styles.shadow,
      shadowColor: shadowColor,
      elevation: elevation || 3,
    },
    wrap && {flexWrap: 'wrap'},
    backgroundColor && {
      backgroundColor: backgroundColor,
    },
    padding && {...handlePadding(ms(padding))},
    margin && {...handleMargin(ms(margin))},
    alignStart && styles.alignStart,
    alignCenter && styles.alignCenter,
    alignEnd && styles.alignEnd,
    justifyCenter && styles.justifyCenter,
    center && styles.center,
    justifyStart && styles.justifyStart,
    justifyEnd && styles.justifyEnd,
    justifySpaceAround && styles.justifySpaceAround,
    justifySpaceBetween && styles.justifySpaceBetween,
    space && {justifyContent: `space-${space}`},
    paddingTop && {paddingTop: ms(paddingTop)},
    paddingRight && {paddingRight: ms(paddingRight)},
    paddingBottom && {paddingBottom: ms(paddingBottom)},
    paddingLeft && {paddingLeft: ms(paddingLeft)},
    marginBottom && {marginBottom: ms(marginBottom)},
    marginTop && {marginTop: ms(marginTop)},
    marginRight && {marginRight: ms(marginRight)},
    marginLeft && {marginLeft: ms(marginLeft)},
    paddingHorizontal && {paddingHorizontal: ms(paddingHorizontal)},
    paddingVertical && {paddingVertical: ms(paddingVertical)},
    marginHorizontal && {marginHorizontal: ms(marginHorizontal)},
    marginVertical && {marginVertical: ms(marginVertical)},
    radius && {borderRadius: s(radius)},
    borderWidth && {borderWidth: borderWidth},
    square && {...handleSquare(s(square))},
    circle && {...handleCircle(s(circle))},
    isNumber(opacity) && {opacity: opacity},
    borderColor && {
      borderColor: borderColor,
    },
    relative && {position: 'relative'},
    absolute && {position: 'absolute'},
    isNumber(top) && {top: vs(top)},
    isNumber(left) && {left: s(left)},
    isNumber(right) && {right: s(right)},
    isNumber(bottom) && {bottom: vs(bottom)},
    overflow && {overflow},
    alignSelf && {alignSelf},
    borderTopWidth && {borderTopWidth},
    borderRightWidth && {borderRightWidth},
    borderBottomWidth && {borderBottomWidth},
    borderLeftWidth && {borderLeftWidth},
    zIndex && {zIndex},
    borderTopLeftRadius && {borderTopLeftRadius},
    borderTopRightRadius && {borderTopRightRadius},
    absoluteFull && styles.absoluteFull,
    isNumber(radiusTop) && styles.radiusTop(radiusTop),
    isNumber(radiusBottom) && styles.radiusBottoms(radiusBottom),
  ];

  return (
    <View style={[blockStyles, style]} {...rest}>
      {children}
    </View>
  );
};

export default AppView;
